<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Diameter_Algo" Id="{5f7b8fc5-d7f2-4611-a186-251f8b0276fd}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Diameter_Algo
VAR PERSISTENT
END_VAR
VAR
	//I need to move variables to the Global Section for HMI Controls. The Camera controls can stay here. 
	fb_Camera		: FB_VN_GevCameraControl;
	CamState		: ETcVNCameraState;	



//Move to Global for HMI Config
	FudgeFactor 	: REAL := 0.3145;
	StrandWidth 	: REAL;
	StrandText 		: STRING;
	ConvertedWidth 	: REAL;
	

	
// Colors
	aColorWhite		: TcVnVector4_LREAL := [255, 255, 255, 255];
	aColorBlack		: TcVnVector4_LREAL := [0, 0, 0, 255];
	aColorGreen		: TcVnVector4_LREAL := [0, 175, 0, 255];
	aColorBlue		: TcVnVector4_LREAL := [0, 0, 255, 255];
	aColorRed		: TcVnVector4_LREAL := [255, 0, 0, 255];
	aColorMagenta	: TcVnVector4_LREAL := [255, 0, 255, 255];
//Results		--Move to Global
	hr					: HRESULT;
	hr_Software_Trig	: HRESULT;
	hr_OmittedImage		: HRESULT;
	hrFunc        		: HRESULT;

//Images


// F_VN_PutTextExp parameters
	nX: UDINT	:= 25;
	nY: UDINT	:= 60;
	fFontScale	: LREAL := 3;
	nThickness	: DINT := 3;

// Image data
	ImageInGvspInfo 	: Gvsp_Image_Info;
	nImage_ID_Num		: ULINT;
	stImageInfo			: TcVNImageInfo;
	sImage_ID_NumText	: STRING;
	nImagePixelFormatChannels	: BYTE;
	nImageEffectivePixelSize	: UINT;
	nImagePixelEncoding			: BYTE;


//Drawing 
	ipEdgePoints1 : ITcVnContainer;
	ipEdgePoints2 : ITcVnContainer;
	ipEdge1 : ITcVnContainer;
	ipEdge2 : ITcVnContainer;
	StrengthScore : REAL;
    aPoint1		:   TcVnPoint2_REAL;
    aPoint2		:   TcVnPoint2_REAL;
	
// parameters
aStartPoint     : TcVnPoint2_REAL := [1300, 1300];
aEndPoint       : TcVnPoint2_REAL := [2800, 1300];

eDirection      : ETcVnEdgeDirection := TCVN_ED_LIGHT_TO_DARK;
fMinStrength    : REAL := 50;
nSearchLines    : UDINT := 101; 
fSearchLineDist : REAL := 3;
nMaxThickness   : UDINT := 15;
nSubpixIter     : UDINT := 100;
eAlgorithm      : ETcVnEdgeDetectionAlgorithm := TCVN_EDA_INTERPOLATION;
fAvgStrength    : REAL;
bInvert			: BOOL := FALSE;

// Watchdog
hrWD            : HRESULT;
tStop           : DINT := 25000;
tRest           : DINT;
nFraction       : UDINT;

// drawing
aLine           : TcVnVector4_LREAL;
sText           : STRING(255);

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF GVL_Vision.Start_Camera_Sequence THEN
	
	CamState :=  fb_Camera.GetState();
	
	// CameraControl is in error state, so try to reset the camera connection
	IF CamState = TCVN_CS_ERROR THEN
		hr :=  fb_Camera.Reset();
	
	// Camera trigger image
	ELSIF CamState = TCVN_CS_TRIGGERING THEN
		hr := fb_Camera.TriggerImage();
	
	// Camera not yet initialized
	ELSIF CamState < TCVN_CS_INITIALIZED THEN
		hr :=  fb_Camera.InitializeCamera();
	
	// Camera not yet opened
	ELSIF CamState < TCVN_CS_OPENED THEN
		hr := fb_Camera.OpenCamera();
	
	// Camera not yet streaming
	ELSIF CamState < TCVN_CS_ACQUIRING THEN
		hr := fb_Camera.StartAcquisition();
	
	// Camera streaming
	ELSIF CamState = TCVN_CS_ACQUIRING THEN
	
		IF GVL_Vision.Trigger_Image THEN
			hr := fb_Camera.TriggerImage();
			IF SUCCEEDED(hr) THEN
				GVL_Vision.Trigger_Image := FALSE;
			END_IF
		ELSE
			hr := fb_Camera.GetCurrentImage(GVL_Vision.ImageIn);
			IF SUCCEEDED(hr) AND GVL_Vision.ImageIn <> 0 THEN
				GVL_Vision.Image_Count := GVL_Vision.Image_Count + 1;
				
				
/////////////////////////////////////////////////////////////////////////////// Place to call vision algorithms
//Add WatchdogTimer

//Raw Image Processing
			sText := CONCAT(CONCAT('Processed ', UDINT_TO_STRING(nFraction)), '%');
			hr := F_VN_PutTextExp(sText, GVL_Vision.ImageIn, nX, nY, TCVN_FT_HERSHEY_SIMPLEX, fFontScale, aColorWhite, 2, TCVN_LT_8_CONNECTED, FALSE, hr);
			sText := CONCAT(CONCAT('Time ', DINT_TO_STRING(tStop - tRest)), 'us');
			hr := F_VN_PutTextExp(sText, GVL_Vision.ImageIn, nX, nY + 70, TCVN_FT_HERSHEY_SIMPLEX, fFontScale, aColorWhite, 2, TCVN_LT_8_CONNECTED, FALSE,hr);
			hr := F_VN_CopyIntoDisplayableImage(GVL_Vision.ImageIn, GVL_Vision.ImageInRawImage, hr);
			
			
			
			
//Draw ROI From Rectangle
			aStartPoint[0] := GVL_Vision.ROI_Size.aCenter[0] - (GVL_Vision.ROI_Size.stSize.fWidth / 2);		//Start Point X
			aStartPoint[1] := GVL_Vision.ROI_Size.aCenter[1]; 												//Start Point Y
			aEndPoint[0] := GVL_Vision.ROI_Size.aCenter[0] + (GVL_Vision.ROI_Size.stSize.fWidth / 2);		//End Point X
			aEndPoint[1] := GVL_Vision.ROI_Size.aCenter[1]; 												//End Point Y
			
			hr := F_VN_DrawPointExp(REAL_TO_UDINT(aStartPoint[0]), REAL_TO_UDINT(aStartPoint[1]), GVL_Vision.ImageIn, TCVN_DS_SQUARE, aColorblack, nSize:= 15, nThickness:=5, TCVN_LT_8_CONNECTED, hr);
			hr := F_VN_DrawPointExp(REAL_TO_UDINT(aEndPoint[0]), REAL_TO_UDINT(aEndPoint[1]), GVL_Vision.ImageIn, TCVN_DS_SQUARE, aColorblack, nSize:= 15, nThickness:=5, TCVN_LT_8_CONNECTED, hr); 

			hr := F_Vn_GetImageInfo(GVL_Vision.ImageIn, GVL_Vision.ImageInInfo, hr);
			//Troubleshoot the function! Maybe not this one. maybe just find one line at a time.
				hrFunc := F_VN_MeasureMinEdgeDistanceExp(
							ipSrcImage              :=   GVL_Vision.ImageIn, 
							fMinDistance            :=   StrandWidth,
							aStartPoint             :=   aStartPoint, 
							aEndPoint               :=   aEndPoint,
							eEdgeDirection          :=   TCVN_ED_LIGHT_TO_DARK,
							fMinStrength            :=   fMinStrength, 
							nSearchLines            :=   nSearchLines,
							fSearchLineDist         :=  fSearchLineDist,
							nMaxThickness           :=  nMaxThickness,
							bInvertSearchDirection  :=  bInvert,
							fSearchGap := 0,
							nSubpixelsIterations    :=  nSubpixIter,
							fApproxPrecision        :=  0.0001,
							eAlgorithm              :=  TCVN_EDA_APPROX_ERF,
							ipEdgePoints1           :=  ipEdge1, 
							ipEdgePoints2           :=  ipEdge2, 
							aPoint1                 :=  aPoint1, 
							aPoint2                 :=  aPoint2,
							hrPrev                  :=  hrFunc
			);		
		
		// Draw First Line
			hr := F_VN_FitLine(ipEdge1, aLine, hr);
			hr := F_VN_DrawLine_TcVnVector4_LREAL(aLine, GVL_Vision.ImageIn, aColorblack, 2, hr);
			hr := F_VN_DrawPointsExp(ipEdge1, GVL_Vision.ImageIn, TCVN_DS_PLUS, aColorwhite, 1, 1, TCVN_LT_8_CONNECTED, hr);
		//Draw Second Line
			hr := F_VN_FitLine(ipEdge2, aLine, hr);
			hr := F_VN_DrawLine_TcVnVector4_LREAL(aLine, GVL_Vision.ImageIn, aColorblack, 2, hr);
			hr := F_VN_DrawPointsExp(ipEdge2, GVL_Vision.ImageIn, TCVN_DS_PLUS, aColorwhite, 1, 1, TCVN_LT_8_CONNECTED, hr);
		
		// Image marking example: Place the Image Number in White and in Black text in the upper left corner of the image
			//sImage_ID_NumText := ULINT_TO_STRING(nImage_ID_Num); // Change Image Number to String
			//hr := F_VN_PutTextExp(sImage_ID_NumText, ImageIn, nX, nY + 210, TCVN_FT_HERSHEY_SIMPLEX, fFontScale, aColorWhite, nThickness, TCVN_LT_8_CONNECTED, FALSE, hr);
		
		
		//Strand Width Information
			//StrandText := CONCAT('Pixel Count: ', REAL_TO_STRING(StrandWidth));
			//hr := F_VN_PutTextExp(StrandText, ImageIn, nX, nY + 280, TCVN_FT_HERSHEY_SIMPLEX, fFontScale, aColorBlack, nThickness, TCVN_LT_8_CONNECTED, FALSE, hr);
		
			//ConvertedWidth := StrandWidth * FudgeFactor; 	//Hand Calculated Cal factor based off of Cal Card
			//StrandText := CONCAT('Calculated Width: ', REAL_TO_STRING(ConvertedWidth));
		
			//hr := F_VN_PutTextExp(StrandText, ImageIn, nX, nY + 350, TCVN_FT_HERSHEY_SIMPLEX, fFontScale, aColorBlack, nThickness, TCVN_LT_8_CONNECTED, FALSE, hr);
					
				
		


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			sText := CONCAT('Returncode ', DINT_TO_STRING(hrFunc));
			hr := F_VN_PutTextExp(sText, GVL_Vision.ImageIn, nX, nY + 140, TCVN_FT_HERSHEY_SIMPLEX, fFontScale, aColorWhite, 2, TCVN_LT_8_CONNECTED, FALSE,hr);
				
			hr := F_VN_TransformIntoDisplayableImageExp(GVL_Vision.ImageIn, GVL_Vision.ImageInGrayDisplay, bAllowDeepCopy:=TRUE, hr);
			END_IF
		END_IF
	END_IF
ELSE
	//Stopping Handler
	CamState :=  fb_Camera.GetState();
	IF CamState = TCVN_CS_ACQUIRING THEN
		hr := fb_Camera.StopAcquisition();
	ELSIF CamState = TCVN_CS_STOPACQUISITION THEN
		hr := fb_Camera.StopAcquisition();
	END_IF
	
	IF GVL_Vision.Trigger_Image THEN
		hr := fb_Camera.Reset();
	END_IF
END_IF

]]></ST>
    </Implementation>
    <LineIds Name="Diameter_Algo">
      <LineId Id="548" Count="0" />
      <LineId Id="664" Count="0" />
      <LineId Id="680" Count="8" />
      <LineId Id="737" Count="6" />
      <LineId Id="696" Count="14" />
      <LineId Id="763" Count="0" />
      <LineId Id="714" Count="1" />
      <LineId Id="719" Count="0" />
      <LineId Id="900" Count="1" />
      <LineId Id="906" Count="0" />
      <LineId Id="902" Count="1" />
      <LineId Id="924" Count="3" />
      <LineId Id="966" Count="0" />
      <LineId Id="957" Count="0" />
      <LineId Id="1052" Count="2" />
      <LineId Id="967" Count="1" />
      <LineId Id="970" Count="0" />
      <LineId Id="969" Count="0" />
      <LineId Id="987" Count="0" />
      <LineId Id="985" Count="0" />
      <LineId Id="929" Count="0" />
      <LineId Id="931" Count="0" />
      <LineId Id="1056" Count="0" />
      <LineId Id="1029" Count="0" />
      <LineId Id="1057" Count="0" />
      <LineId Id="1031" Count="19" />
      <LineId Id="1030" Count="0" />
      <LineId Id="932" Count="0" />
      <LineId Id="1028" Count="0" />
      <LineId Id="933" Count="19" />
      <LineId Id="904" Count="1" />
      <LineId Id="765" Count="1" />
      <LineId Id="908" Count="0" />
      <LineId Id="907" Count="0" />
      <LineId Id="767" Count="0" />
      <LineId Id="955" Count="0" />
      <LineId Id="954" Count="0" />
      <LineId Id="956" Count="0" />
      <LineId Id="721" Count="2" />
      <LineId Id="667" Count="0" />
      <LineId Id="754" Count="0" />
      <LineId Id="953" Count="0" />
      <LineId Id="771" Count="0" />
      <LineId Id="768" Count="0" />
      <LineId Id="772" Count="1" />
      <LineId Id="895" Count="2" />
      <LineId Id="769" Count="0" />
      <LineId Id="762" Count="0" />
      <LineId Id="760" Count="0" />
      <LineId Id="757" Count="0" />
      <LineId Id="876" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>