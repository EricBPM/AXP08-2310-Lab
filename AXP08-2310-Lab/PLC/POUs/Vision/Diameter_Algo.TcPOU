<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Diameter_Algo" Id="{5f7b8fc5-d7f2-4611-a186-251f8b0276fd}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Diameter_Algo
VAR PERSISTENT

	
END_VAR
VAR
//I need to move variables to the Global Section for HMI Controls. The Camera controls can stay here. 
	fb_Camera		: FB_VN_GevCameraControl;
	CamState		: ETcVNCameraState;	
//Results		--Move to Global
	hr					: HRESULT;
	hrFunc        		: HRESULT;
	hrWD            	: HRESULT;

	
//Move to Global for HMI Config

	StrandWidth 	: LREAL;
	StrandText 		: STRING;
	ConvertedWidth 	: REAL;
////////////////////////////////////////

// Image data
	ImageInGvspInfo 	: Gvsp_Image_Info;
	stImageInfo			: TcVNImageInfo;
	nImagePixelFormatChannels	: BYTE;
	nImageEffectivePixelSize	: UINT;
	nImagePixelEncoding			: BYTE;


//Drawing 
	Edge1Points : ITcVnContainer;
	Edge2Points : ITcVnContainer;
	
	EdgeDist1 : ITcVnContainer;
	EdgeDist2 : ITcVnContainer;

    aFoundPoint1		:   TcVnPoint2_LREAL;
    aFoundPoint2		:   TcVnPoint2_LREAL;
	

//F_VN_LocateEdgeExp Parameters FIRST EDGE, Light to Dark
	eDirection_1			: ETcVnEdgeDirection := TCVN_ED_LIGHT_TO_DARK;
	fMinStrength_1			: REAL := 50;
	nSearchLines_1			: UDINT := 101; 
	fSearchLineDist_1		: REAL := 3;
	nMaxThickness_1			: UDINT := 15;
	nSubpixIter_1			: UDINT := 100;
	eAlgorithm_1			: ETcVnEdgeDetectionAlgorithm := TCVN_EDA_INTERPOLATION;
	fAvgStrength_1			: REAL;
	bInvert_1				: BOOL := FALSE;
	
//F_VN_LocateEdgeExp Parameters SECOND EDGE, Dark to Light
	eDirection_2      		: ETcVnEdgeDirection := TCVN_ED_DARK_TO_LIGHT;
	fMinStrength_2    		: REAL := 50;
	nSearchLines_2    		: UDINT := 101; 
	fSearchLineDist_2 		: REAL := 3;
	nMaxThickness_2   		: UDINT := 15;
	nSubpixIter_2     		: UDINT := 100;
	eAlgorithm_2      		: ETcVnEdgeDetectionAlgorithm := TCVN_EDA_INTERPOLATION;
	fAvgStrength_2    		: REAL;
	bInvert_2				: BOOL := FALSE;
	
//F_VN_MeasureEdgeDistanceExp
	fAvgDistance				: REAL;
	eDirection_M      			: ETcVnEdgeDirection := TCVN_ED_LIGHT_TO_DARK;
	fMinStrength_M    			: REAL := 50;
	nSearchLines_M    			: UDINT := 101; 
	fSearchLineDist_M 			: REAL := 3;
	nMaxThickness_M   			: UDINT := 15;
	bInvertSearchDirection_M	: BOOL := FALSE;
	fSearchGap_M 				: REAL;
	nSubpixIter_M     			: UDINT := 100;
	fApproxPrecision_M   		:   REAL  :=  0.0001;
	eAlgorithm_M      			: ETcVnEdgeDetectionAlgorithm := TCVN_EDA_INTERPOLATION;

	



	
	
	
	

// Search Window
	aStartPoint     : TcVnPoint2_REAL := [1300, 1300];
	aEndPoint       : TcVnPoint2_REAL := [2800, 1300];



/////////////////////////////////////////////////////////////////////////////////////////////
//////These are used Variables & Constants for other functions. Dont delete or move them. 
// Colors
	aColorWhite		: TcVnVector4_LREAL := [255, 255, 255, 255];
	aColorBlack		: TcVnVector4_LREAL := [0, 0, 0, 255];
	aColorGreen		: TcVnVector4_LREAL := [0, 175, 0, 255];
	aColorBlue		: TcVnVector4_LREAL := [0, 0, 255, 255];
	aColorRed		: TcVnVector4_LREAL := [255, 0, 0, 255];
	aColorMagenta	: TcVnVector4_LREAL := [255, 0, 255, 255];
// Watchdog
	tStop           : DINT := 50000;
	tRest           : DINT;
	nFraction       : UDINT;
// drawing
	aLine           : TcVnVector4_LREAL;
	sText           : STRING(255);
// F_VN_PutTextExp parameters
	nX: UDINT	:= 25;
	nY: UDINT	:= 60;
	fFontScale	: LREAL := 3;
	nThickness	: DINT := 3;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[

IF GVL_Vision.Start_Camera_Sequence THEN
	
	CamState :=  fb_Camera.GetState();
	
	// CameraControl is in error state, so try to reset the camera connection
	IF CamState = TCVN_CS_ERROR THEN
		hr :=  fb_Camera.Reset();
	
	// Camera trigger image
	ELSIF CamState = TCVN_CS_TRIGGERING THEN
		hr := fb_Camera.TriggerImage();
	
	// Camera not yet initialized
	ELSIF CamState < TCVN_CS_INITIALIZED THEN
		hr :=  fb_Camera.InitializeCamera();
	
	// Camera not yet opened
	ELSIF CamState < TCVN_CS_OPENED THEN
		hr := fb_Camera.OpenCamera();
	
	// Camera not yet streaming
	ELSIF CamState < TCVN_CS_ACQUIRING THEN
		hr := fb_Camera.StartAcquisition();
	
	// Camera streaming
	ELSIF CamState = TCVN_CS_ACQUIRING THEN
	
		IF GVL_Vision.Trigger_Image THEN
			hr := fb_Camera.TriggerImage();
			IF SUCCEEDED(hr) THEN
				GVL_Vision.Trigger_Image := FALSE;
			END_IF
		ELSE
			hr := fb_Camera.GetCurrentImage(GVL_Vision.ImageIn);
			IF SUCCEEDED(hr) AND GVL_Vision.ImageIn <> 0 THEN
				GVL_Vision.Image_Count := GVL_Vision.Image_Count + 1;
				
				hr := F_VN_CopyIntoDisplayableImage(GVL_Vision.ImageIn, GVL_Vision.ImageInRawImage, hr);
				hr := F_Vn_GetImageInfo(GVL_Vision.ImageIn, GVL_Vision.ImageInInfo, hr);

				
/////////////////////////////////////////////////////////////////////////////// Place to call vision algorithms

//Draw Search Window From Rectangle
			aStartPoint[0] := GVL_Vision.ROI_Size.aCenter[0] - (GVL_Vision.ROI_Size.stSize.fWidth / 2);		//Start Point X
			aStartPoint[1] := GVL_Vision.ROI_Size.aCenter[1]; 												//Start Point Y
			aEndPoint[0] := GVL_Vision.ROI_Size.aCenter[0] + (GVL_Vision.ROI_Size.stSize.fWidth / 2);		//End Point X
			aEndPoint[1] := GVL_Vision.ROI_Size.aCenter[1]; 												//End Point Y
			
			

			hrWD := F_VN_StartRelWatchdog(tStop, hr);
			
			   hrFunc := F_VN_LocateEdgeExp(	//Edge 1 Function
							  ipSrcImage             :=   GVL_Vision.ImageIn,
							  ipEdgePoints           :=   Edge1Points,
							  aStartPoint            :=   aStartPoint,
							  aEndPoint              :=   aEndPoint,
							  eEdgeDirection         :=   TCVN_ED_Light_TO_DARK,
							  fMinStrength           :=   fMinStrength_1,
							  nSearchLines           :=   nSearchLines_1,
							  fSearchLineDist        :=   fSearchLineDist_1,
							  nMaxThickness          :=   nMaxThickness_1,
							  nSubpixelsIterations   :=   nSubpixIter_1,
							  fApproxPrecision       :=   0.0001,
							  eAlgorithm             :=   eAlgorithm_1,
							  hrPrev                 :=   hr,
							  fAvgStrength           =>   fAvgStrength_1);
							  
				hrFunc := F_VN_LocateEdgeExp(	//Edge 2 Function - Using same parameters for both for now, unless there is a reason to map both sets. 
							  ipSrcImage             :=   GVL_Vision.ImageIn,
							  ipEdgePoints           :=   Edge2Points,
							  aStartPoint            :=   aStartPoint,
							  aEndPoint              :=   aEndPoint,
							  eEdgeDirection         :=   TCVN_ED_DARK_TO_LIGHT,
							  fMinStrength           :=   fMinStrength_1,
							  nSearchLines           :=   nSearchLines_1,
							  fSearchLineDist        :=   fSearchLineDist_1,
							  nMaxThickness          :=   nMaxThickness_1,
							  nSubpixelsIterations   :=   nSubpixIter_1,
							  fApproxPrecision       :=   0.0001,
							  eAlgorithm             :=   eAlgorithm_1,
							  hrPrev                 :=   hr,
							  fAvgStrength           =>   fAvgStrength_1);			  
							  
			hrWD := F_VN_StopWatchdog(hrWD, nFractionProcessed=>nFraction, tRest=>tRest);
	
		// Draw First Line
			hr := F_VN_FitLine(Edge1Points, aLine, hr);
			hr := F_VN_DrawLine_TcVnVector4_LREAL(aLine, GVL_Vision.ImageIn, aColorblack, 2, hr);
			hr := F_VN_DrawPointsExp(Edge1Points, GVL_Vision.ImageIn, TCVN_DS_PLUS, aColorBlack, 3, 3, TCVN_LT_8_CONNECTED, hr);
		//Draw Second Line
			hr := F_VN_FitLine(Edge2Points, aLine, hr);
			hr := F_VN_DrawLine_TcVnVector4_LREAL(aLine, GVL_Vision.ImageIn, aColorblack, 2, hr);
			hr := F_VN_DrawPointsExp(Edge2Points, GVL_Vision.ImageIn, TCVN_DS_PLUS, aColorBlack, 3, 3, TCVN_LT_8_CONNECTED, hr);
			
		//Find the closest points in the two Line Sets.	
			hr := F_VN_ClosestPointsBF(Edge1Points, Edge2Points, StrandWidth, aFoundPoint1, aFoundpoint2, hr);
			
		//Processed Percent and Processing Time. Add text to image
			sText := CONCAT(CONCAT('Processed ', UDINT_TO_STRING(nFraction)), '%');
			hr := F_VN_PutTextExp(sText, GVL_Vision.ImageIn, nX, nY, TCVN_FT_HERSHEY_SIMPLEX, fFontScale, aColorWhite, 2, TCVN_LT_8_CONNECTED, FALSE, hr);
			sText := CONCAT(CONCAT('Time ', DINT_TO_STRING(tStop - tRest)), 'us');
			hr := F_VN_PutTextExp(sText, GVL_Vision.ImageIn, nX, nY + 70, TCVN_FT_HERSHEY_SIMPLEX, fFontScale, aColorWhite, 2, TCVN_LT_8_CONNECTED, FALSE,hr);
			



	
		
		//Image marking example: Place the Image Number in White and in Black text in the upper left corner of the image
			//sImage_ID_NumText := ULINT_TO_STRING(nImage_ID_Num); // Change Image Number to String
			//hr := F_VN_PutTextExp(sImage_ID_NumText, ImageIn, nX, nY + 210, TCVN_FT_HERSHEY_SIMPLEX, fFontScale, aColorWhite, nThickness, TCVN_LT_8_CONNECTED, FALSE, hr);
		
		
		//Strand Width Information
			StrandText := CONCAT('Pixel Count: ', REAL_TO_STRING(StrandWidth));
			hr := F_VN_PutTextExp(StrandText, GVL_Vision.ImageIn, nX, nY + 280, TCVN_FT_HERSHEY_SIMPLEX, fFontScale, aColorBlack, nThickness, TCVN_LT_8_CONNECTED, FALSE, hr);
		
			ConvertedWidth := StrandWidth / GVL_Vision.Calibration_Factor; 	//Hand Calculated Cal factor based off of Cal Card
			StrandText := CONCAT('Calculated Width: ', REAL_TO_STRING(ConvertedWidth));
		
			hr := F_VN_PutTextExp(StrandText, GVL_Vision.ImageIn, nX, nY + 350, TCVN_FT_HERSHEY_SIMPLEX, fFontScale, aColorBlack, nThickness, TCVN_LT_8_CONNECTED, FALSE, hr);
					
				
		


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			sText := CONCAT('Returncode ', DINT_TO_STRING(hrFunc));
			hr := F_VN_PutTextExp(sText, GVL_Vision.ImageIn, nX, nY + 140, TCVN_FT_HERSHEY_SIMPLEX, fFontScale, aColorWhite, 2, TCVN_LT_8_CONNECTED, FALSE,hr);
				
			hr := F_VN_TransformIntoDisplayableImageExp(GVL_Vision.ImageIn, GVL_Vision.ImageInGrayDisplay, bAllowDeepCopy:=TRUE, hr);
			END_IF
		END_IF
	END_IF
ELSE
	//Stopping Handler
	CamState :=  fb_Camera.GetState();
	IF CamState = TCVN_CS_ACQUIRING THEN
		hr := fb_Camera.StopAcquisition();
	ELSIF CamState = TCVN_CS_STOPACQUISITION THEN
		hr := fb_Camera.StopAcquisition();
	END_IF
	
	IF GVL_Vision.Trigger_Image THEN
		hr := fb_Camera.Reset();
	END_IF
	GVL_Vision.Image_Count := 0;//Reset Image Count on stop.
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="Diameter_Algo">
      <LineId Id="1647" Count="150" />
      <LineId Id="757" Count="0" />
      <LineId Id="1141" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>